// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type APIEventConnection struct {
	// The total number of ApiEvent items, regardless of pagination.
	TotalCount int64 `json:"totalCount"`
	// A list of edges representing the ApiEvent items in the current page.
	Edges []*APIEventEdge `json:"edges"`
	// Information about the current page and pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

type APIEventEdge struct {
	// The cursor for this ApiEvent edge, used for pagination.
	Cursor string `json:"cursor"`
	// The ApiEvent node associated with this edge.
	Node *ApiEvent `json:"node"`
}

type APIEventMetadata struct {
	// Timestamp when the event was first observed.
	Timestamp int64 `json:"timestamp"`
	// Timestamp when the event was last observed.
	UpdatedTime int64 `json:"updatedTime"`
	// Type of API being accessed (e.g., REST, gRPC, GraphQL, SOAP).
	APIType *APIType `json:"apiType,omitempty"`
	// Indicates whether the API call was authenticated.
	IsAuthenticated *bool `json:"isAuthenticated,omitempty"`
	// ID of the cluster where the API event occurred.
	ClusterID int32 `json:"clusterId"`
	// Name of the cluster where the API event occurred.
	ClusterName string `json:"clusterName"`
	// Hostname of the server or service where the API event originated.
	Hostname string `json:"hostname"`
	// The scheme portion of the URL (e.g. http, https)
	Scheme *Scheme `json:"scheme,omitempty"`
}

// Specifies the field and direction for sorting ApiEvents.
type APIEventSortInput struct {
	Field     APIEventSortableField `json:"field"`
	Direction SortDirection         `json:"direction"`
}

// Input for filtering ApiType enum fields.
type APITypeFilterInput struct {
	// Equals exact value.
	Eq *APIType `json:"eq,omitempty"`
	// Not equals exact value.
	Ne *APIType `json:"ne,omitempty"`
	// Value is in the provided list.
	In []APIType `json:"in,omitempty"`
	// Value is not in the provided list.
	Nin []APIType `json:"nin,omitempty"`
}

// Input for filtering fields of type Boolean.
type BooleanFilterInput struct {
	// Equals exact value (true or false).
	Eq *bool `json:"eq,omitempty"`
	// Not equals exact value (less common).
	Ne *bool `json:"ne,omitempty"`
}

// Input object containing all filter and pagination parameters for apiEvents query.
type Filters struct {
	// Filter by specific Cluster IDs.
	ClusterIds []int32 `json:"clusterIds"`
	// Filter events occurring at or after this timestamp (inclusive). Applied to metadata.timestamp.
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`
	// Filter events occurring at or before this timestamp (inclusive). Applied to metadata.timestamp.
	ToTimestamp *int64 `json:"toTimestamp,omitempty"`
	// Filter by API Type (e.g., REST, GRPC).
	APIType *APITypeFilterInput `json:"apiType,omitempty"`
	// Filter by authentication status.
	IsAuthenticated *BooleanFilterInput `json:"isAuthenticated,omitempty"`
	// Filter by hostname (e.g., service domain name).
	Hostname *StringFilterInput `json:"hostname,omitempty"`
	// Filter by HTTP response status code.
	// Supports specific codes (e.g., eq: "404") and families (e.g., eq: "2xx", ne: "5xx").
	// Regex/iregex match against the string representation.
	// Use 'in'/'nin' for multiple specific codes/families.
	ResponseStatusCode *StringFilterInput `json:"responseStatusCode,omitempty"`
	// Filter by HTTP request path.
	RequestPath *StringFilterInput `json:"requestPath,omitempty"`
	// Filter by HTTP request method.
	RequestMethod *StringFilterInput `json:"requestMethod,omitempty"`
	// Filter by destination workload IP address.
	DestinationIP *StringFilterInput `json:"destinationIp,omitempty"`
	// Filter by destination workload name (from metadata).
	DestinationName *StringFilterInput `json:"destinationName,omitempty"`
	// Filter by destination workload type.
	DestinationType *StringFilterInput `json:"destinationType,omitempty"`
	// Filter by risk score of sensitive data found.
	// If multiple criteria (riskScore, severity) are provided for sensitiveData,
	// it finds events where at least one sensitive data item matches *all* provided criteria ($elemMatch).
	SensitiveDataRiskScore *IntFilterInput `json:"sensitiveData_riskScore,omitempty"`
	// Filter by severity of sensitive data found.
	// If multiple criteria (riskScore, severity) are provided for sensitiveData,
	// it finds events where at least one sensitive data item matches *all* provided criteria ($elemMatch).
	SensitiveDataSeverity *SeverityFilterInput `json:"sensitiveData_severity,omitempty"`
	// Specify sorting order for the results. Defaults to _id ascending if not provided.
	SortBy *APIEventSortInput `json:"sortBy,omitempty"`
	// Returns the first n items after the specified cursor.
	First *int32 `json:"first,omitempty"`
	// Cursor indicating the item after which to fetch.
	After *string `json:"after,omitempty"`
	// Returns the last n items before the specified cursor.
	Last *int32 `json:"last,omitempty"`
	// Cursor indicating the item before which to fetch.
	Before *string `json:"before,omitempty"`
}

type HTTP struct {
	// Details of the HTTP request.
	Request *Reqwest `json:"request"`
	// Details of the HTTP response.
	Response *Ressponse `json:"response"`
}

// Input for filtering fields of type Int64 (e.g., timestamps).
type Int64FilterInput struct {
	// Equals exact value.
	Eq *int64 `json:"eq,omitempty"`
	// Not equals exact value.
	Ne *int64 `json:"ne,omitempty"`
	// Less than value.
	Lt *int64 `json:"lt,omitempty"`
	// Less than or equal to value.
	Lte *int64 `json:"lte,omitempty"`
	// Greater than value.
	Gt *int64 `json:"gt,omitempty"`
	// Greater than or equal to value.
	Gte *int64 `json:"gte,omitempty"`
}

// Input for filtering fields of type Int.
type IntFilterInput struct {
	// Equals exact value.
	Eq *int32 `json:"eq,omitempty"`
	// Not equals exact value.
	Ne *int32 `json:"ne,omitempty"`
	// Value is in the provided list.
	In []int32 `json:"in,omitempty"`
	// Value is not in the provided list.
	Nin []int32 `json:"nin,omitempty"`
	// Less than value.
	Lt *int32 `json:"lt,omitempty"`
	// Less than or equal to value.
	Lte *int32 `json:"lte,omitempty"`
	// Greater than value.
	Gt *int32 `json:"gt,omitempty"`
	// Greater than or equal to value.
	Gte *int32 `json:"gte,omitempty"`
}

type JwtInfo struct {
	// Username extracted from the JWT payload.
	Username *string `json:"username,omitempty"`
	// Email extracted from the JWT payload.
	Email *string `json:"email,omitempty"`
	// Issuer of the JWT.
	Issuer *string `json:"issuer,omitempty"`
	// Subject of the JWT.
	Subject *string `json:"subject,omitempty"`
	// Intended audience of the JWT.
	Audience *string `json:"audience,omitempty"`
	// Expiration time of the JWT.
	ExpirationTime *string `json:"expirationTime,omitempty"`
	// Time before which the JWT is not valid.
	NotBefore *string `json:"notBefore,omitempty"`
	// Time when the JWT was issued.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// Unique identifier of the JWT.
	Jti *string `json:"jti,omitempty"`
	// Algorithm used to sign the JWT.
	Algorithm *string `json:"algorithm,omitempty"`
}

// Location within the API request or response where sensitive data was detected.
type Location struct {
	// where indicates the specific part of the request or response.
	Where *Where `json:"where,omitempty"`
	// key is the header key where sensitive data was found.
	// It is only applicable when where is REQUEST_HEADER or RESPONSE_HEADER.
	Key *string `json:"key,omitempty"`
	// startIndex is the starting index of the sensitive data within the located part.
	StartIndex *int32 `json:"startIndex,omitempty"`
	// endIndex is the ending index of the sensitive data within the located part.
	EndIndex *int32 `json:"endIndex,omitempty"`
}

type Network struct {
	// Source workload initiating the network communication.
	Source *Workload `json:"source"`
	// Destination workload receiving the network communication.
	Destination *Workload `json:"destination"`
	// Network protocol used for communication (e.g., HTTP/1.1, HTTP/2, TCP, UDP).
	Protocol string `json:"protocol"`
}

// Information about the current page in a paginated result set.
type PageInfo struct {
	// The cursor corresponding to the first item in the current page.
	StartCursor *string `json:"startCursor,omitempty"`
	// The cursor corresponding to the last item in the current page.
	EndCursor *string `json:"endCursor,omitempty"`
	// Indicates whether there are more items after the current page.
	HasNextPage bool `json:"hasNextPage"`
	// Indicates whether there are more items before the current page.
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type Query struct {
}

// Reqwest represents HTTP request.
type Reqwest struct {
	// HTTP request headers.
	Headers map[string]any `json:"headers,omitempty"`
	// HTTP request method (e.g., GET, POST, PUT, DELETE).
	Method string `json:"method"`
	// HTTP request path or endpoint.
	Path string `json:"path"`
	// HTTP request body.
	Body *string `json:"body,omitempty"`
	// TLS version used for the request (if applicable).
	TLSVersion *string `json:"tlsVersion,omitempty"`
}

// Response represents HTTP response.
type Ressponse struct {
	// HTTP response headers.
	Headers map[string]any `json:"headers,omitempty"`
	// HTTP response status code.
	StatusCode int32 `json:"statusCode"`
	// HTTP response body.
	Body *string `json:"body,omitempty"`
	// TLS version used for the response (if applicable).
	TLSVersion *string `json:"tlsVersion,omitempty"`
}

// SensitiveData represents information detected as sensitive, along with its metadata.
type SensitiveData struct {
	// Name of the sensitive data type (e.g., EMAIL, JWT, SSN, CREDIT_CARD).
	Name *string `json:"name,omitempty"`
	// Severity of the sensitive data exposure.
	Severity Severity `json:"severity"`
	// Numerical risk score associated with the sensitive data.
	RiskScore *int32 `json:"riskScore,omitempty"`
	// Location within the API event where the sensitive data was found.
	Location *Location `json:"location"`
	// Tags categorizing the sensitive data (e.g., PII, Financial, Credentials).
	Tags []string `json:"tags,omitempty"`
}

// Input for filtering Severity enum fields.
type SeverityFilterInput struct {
	// Equals exact value.
	Eq *Severity `json:"eq,omitempty"`
	// Not equals exact value.
	Ne *Severity `json:"ne,omitempty"`
	// Value is in the provided list.
	In []Severity `json:"in,omitempty"`
	// Value is not in the provided list.
	Nin []Severity `json:"nin,omitempty"`
}

// Input for filtering fields of type String.
type StringFilterInput struct {
	// Equals exact value.
	Eq *string `json:"eq,omitempty"`
	// Not equals exact value.
	Ne *string `json:"ne,omitempty"`
	// Value is in the provided list.
	In []string `json:"in,omitempty"`
	// Value is not in the provided list.
	Nin []string `json:"nin,omitempty"`
	// Matches PCRE regular expression (case-sensitive by default).
	Regex *string `json:"regex,omitempty"`
	// Matches PCRE regular expression (case-insensitive).
	Iregex *string `json:"iregex,omitempty"`
}

// Workload represents a computational entity (e.g., Kubernetes Pod, VM) acting as a
// source or destination in network communication.
type Workload struct {
	// Metadata associated with the workload, if available.
	Metadata *WorkloadMetadata `json:"metadata,omitempty"`
	// IP address of the workload.
	IP string `json:"ip"`
	// Port number used by the workload for communication.
	Port int32 `json:"port"`
	// Type of workload (e.g., Pod, Service, VM).
	Type *string `json:"type,omitempty"`
}

type WorkloadMetadata struct {
	// Name of the workload.
	Name *string `json:"name,omitempty"`
	// Kubernetes namespace where the workload is deployed (if applicable).
	Namespace *string `json:"namespace,omitempty"`
	// Kubernetes labels associated with the workload (if applicable).
	Labels map[string]any `json:"labels,omitempty"`
}

// Fields available for sorting ApiEvent results.
type APIEventSortableField string

const (
	// Sort by the time the event was first observed.
	APIEventSortableFieldTimestamp APIEventSortableField = "TIMESTAMP"
	// Sort by the time the event was last updated.
	APIEventSortableFieldUpdatedTime APIEventSortableField = "UPDATED_TIME"
	// Sort by the HTTP request path.
	APIEventSortableFieldRequestPath APIEventSortableField = "REQUEST_PATH"
	// Sort by the HTTP response status code.
	APIEventSortableFieldStatusCode APIEventSortableField = "STATUS_CODE"
	// Sort by the event count.
	APIEventSortableFieldCount APIEventSortableField = "COUNT"
	// Sort by the sensitive data risk score.
	APIEventSortableFieldRiskScore APIEventSortableField = "RISK_SCORE"
	// Sort by the sensitive data severity.
	APIEventSortableFieldSeverity APIEventSortableField = "SEVERITY"
)

var AllAPIEventSortableField = []APIEventSortableField{
	APIEventSortableFieldTimestamp,
	APIEventSortableFieldUpdatedTime,
	APIEventSortableFieldRequestPath,
	APIEventSortableFieldStatusCode,
	APIEventSortableFieldCount,
	APIEventSortableFieldRiskScore,
	APIEventSortableFieldSeverity,
}

func (e APIEventSortableField) IsValid() bool {
	switch e {
	case APIEventSortableFieldTimestamp, APIEventSortableFieldUpdatedTime, APIEventSortableFieldRequestPath, APIEventSortableFieldStatusCode, APIEventSortableFieldCount, APIEventSortableFieldRiskScore, APIEventSortableFieldSeverity:
		return true
	}
	return false
}

func (e APIEventSortableField) String() string {
	return string(e)
}

func (e *APIEventSortableField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APIEventSortableField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApiEventSortableField", str)
	}
	return nil
}

func (e APIEventSortableField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Supported API types.
type APIType string

const (
	// Represents a RESTful API.
	APITypeRest APIType = "REST"
	// Represents a gRPC API.
	APITypeGrpc APIType = "GRPC"
)

var AllAPIType = []APIType{
	APITypeRest,
	APITypeGrpc,
}

func (e APIType) IsValid() bool {
	switch e {
	case APITypeRest, APITypeGrpc:
		return true
	}
	return false
}

func (e APIType) String() string {
	return string(e)
}

func (e *APIType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APIType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApiType", str)
	}
	return nil
}

func (e APIType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Scheme string

const (
	SchemeHTTP  Scheme = "HTTP"
	SchemeHTTPS Scheme = "HTTPS"
)

var AllScheme = []Scheme{
	SchemeHTTP,
	SchemeHTTPS,
}

func (e Scheme) IsValid() bool {
	switch e {
	case SchemeHTTP, SchemeHTTPS:
		return true
	}
	return false
}

func (e Scheme) String() string {
	return string(e)
}

func (e *Scheme) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Scheme(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Scheme", str)
	}
	return nil
}

func (e Scheme) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Severity string

const (
	SeverityCritical Severity = "CRITICAL"
	SeverityHigh     Severity = "HIGH"
	SeverityMedium   Severity = "MEDIUM"
	SeverityLow      Severity = "LOW"
)

var AllSeverity = []Severity{
	SeverityCritical,
	SeverityHigh,
	SeverityMedium,
	SeverityLow,
}

func (e Severity) IsValid() bool {
	switch e {
	case SeverityCritical, SeverityHigh, SeverityMedium, SeverityLow:
		return true
	}
	return false
}

func (e Severity) String() string {
	return string(e)
}

func (e *Severity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Severity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}

func (e Severity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specifies the direction for sorting.
type SortDirection string

const (
	// Ascending order (default).
	SortDirectionAsc SortDirection = "ASC"
	// Descending order.
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Where string

const (
	// Sensitive data found in request headers.
	WhereRequestHeader Where = "REQUEST_HEADER"
	// Sensitive data found in request body.
	WhereRequestPayload Where = "REQUEST_PAYLOAD"
	// Sensitive data found in response headers.
	WhereResponseHeader Where = "RESPONSE_HEADER"
	// Sensitive data found in response body.
	WhereResponsePayload Where = "RESPONSE_PAYLOAD"
)

var AllWhere = []Where{
	WhereRequestHeader,
	WhereRequestPayload,
	WhereResponseHeader,
	WhereResponsePayload,
}

func (e Where) IsValid() bool {
	switch e {
	case WhereRequestHeader, WhereRequestPayload, WhereResponseHeader, WhereResponsePayload:
		return true
	}
	return false
}

func (e Where) String() string {
	return string(e)
}

func (e *Where) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Where(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Where", str)
	}
	return nil
}

func (e Where) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
